"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.KeyBinding=void 0;const keyboardEvent_1=require("./lib/keyboardEvent"),stack_1=require("./lib/stack");class Logger{constructor(e=!1){this._debug=e}log(...e){this._debug&&console.log("%c[keybinding:debug]","font-weight: bold;color:#1e90ff",...e)}warn(...e){console.warn("%c[keybinding]","font-weight: bold;color:#f39c12",...e)}error(...e){console.error("%c[keybinding]","font-weight: bold;color:#c0392b",...e)}debug(e=!0){this._debug=e}}class KeyBinding{constructor(e,i=!1){this.name=e,this.debug=i,this._keybindings=new Map,this._ids=[],this._stackMap=new Map,this._logger=new Logger(this.debug||KeyBinding._debug),this._disposed=!1,this.name?KeyBinding.map.has(this.name)?this._logger.error("Duplicate name:",this.name):(KeyBinding.map.set(this.name,this),this.handler=async e=>{await this._handler(e)},this._logger.log("Create KeyBinding: "+this.name)):this._logger.error("name is required!")}async _handler(e){if(this._disposed)return void this._logger.warn(`KeyBinding(${this.name}) has been disposed!`);this._logger.log("Keydown detected at "+this.name);const i=new keyboardEvent_1.StandardKeyboardEvent(e),s=[];for(const t in this._ids){const n=this._ids[this._ids.length-1-parseInt(t,10)],g=this._keybindings.get(n);if(s.includes(g.key))break;i.equals(g.key)&&(s.push(g.key),this._logger.log(`Fire keybinding ${this.name}:${n}`),g.exec(e))}}_halt(e){this._stackMap.has(e)||this._stackMap.set(e,new stack_1.default);const i=this._keybindings.get(e);this._stackMap.get(e).push(i),this._keybindings.delete(e),this._logger.log(`Halt ${this.name}:${e}:${i.key}`)}_resume(e){const i=this._stackMap.get(e),s=i.pop();this._keybindings.set(e,s),i.isEmpty&&this._stackMap.delete(e),this._logger.log(`Resumed ${this.name}:${e}:${s.key}`)}register(e,i,s){e?(this._keybindings.has(e)&&this._halt(e),this._keybindings.set(e,{id:e,key:i,exec:s}),this._ids.push(e),this._logger.log(`Registed ${this.name}:${e}:${i}`)):this._logger.error("id is required!")}unregister(e){this._keybindings.has(e)?(this._keybindings.delete(e),this._ids.splice(this._ids.indexOf(e),1),this._stackMap.has(e)&&this._resume(e),this._logger.log(`Unregisted ${this.name}:${e}`)):this._logger.warn(`KeyBindingItem id(${e}) not found in KeyBinding(${this.name})`)}dispose(){this._keybindings.clear(),KeyBinding.map.delete(this.name),this._disposed=!0,this._logger.log("Dispose KeyBinding: "+this.name)}static debug(){KeyBinding._debug=!0,KeyBinding._logger.debug(!0)}static dispose(){KeyBinding.map.forEach(e=>e.dispose()),KeyBinding.map.clear()}}exports.KeyBinding=KeyBinding,KeyBinding.map=new Map,KeyBinding._debug=!1,KeyBinding._logger=new Logger(KeyBinding._debug);